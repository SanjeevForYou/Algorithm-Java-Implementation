1. Which is a requirement for using the binary search algorithm to find an item in an array?
Answer : The array must be in sorted order
Correct Response 
This is the correct response. Binary search rules out half of the remaining portion of the list each time, but it can only do this on a sorted list


2. The following code implements binary search. Choose the option that correctly fills in the missing line of code:

/* Return true if toFind is found in toSearch, 
 * otherwise return false.  Uses binary search. */
public static boolean binarySeach(int[] toSearch, int toFind)
{
    int low = 0;
    int high = toSearch.length - 1;
    int mid;
    while ( << INSERT ANSWER CODE HERE >> )
    {   
        mid = low + ((high-low)/2);
        if (toFind < toSearch[mid]) {
            high = mid-1;
        }
        else if (toFind > toSearch[mid]) {
            low = mid+1;
        }
        else return true;
    }
    return false;
}

Answer : hith >= low
Correct Response 
This is the correct response. High must be greater than or equal to low. If it falls below low, then we conclude toFind is not there

3. Consider the following ordering of integers in an array:

8 , 12 , 45 , 58 , 22 , 18 , 43 , 30

Which of the following sorting algorithms could have produced this array above after 3 iterations of its outer loop?

Answer : Insertion Sort
Correct Response 
Insertion sort could have produced this ordering because the first four elements in the list are in sorted order. At the end of the i'th iteration of the outer loop, insertion sort ensures that the first i+1 elements are in sorted order relative to each other.

Not, selection sort

4. True or false: Selection sort is faster when the elements in the array are already sorted than when they are unsorted.

Answer : False
Correct Response 
This is false because the two nested loops in selection sort always execute to completion, no matter what the order of the underlying elements. Because the inner loop in selection sort must find the smallest remaining element, it must search all the way through the remaining elements to be sure its found the smallest.

5. True or false: Insertion sort as we examined in (i.e. mystery sort) is faster when the elements in the array are already sorted than when they are unsorted.
Answer: True
Correct Response 
This is true because the inner loop in insertion sort aborts as soon as it discovers that the element it is moving is already in the correct relative position. If the array is already sorted, then the inner loop will always abort after just one check.




